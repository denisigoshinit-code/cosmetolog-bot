 # get_file_id.py
import os
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram import F
import asyncio
import logging
from dotenv import load_dotenv

load_dotenv()


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

@dp.message(F.command("start"))
async def cmd_start(message: Message):
    await message.answer("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å file_id.")

@dp.message(F.photo)
async def get_photo_id(message: Message):
    # –°–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ —Å–ø–∏—Å–∫–µ)
    photo = message.photo[-1]
    file_id = photo.file_id
    file_size = photo.file_size
    width = photo.width
    height = photo.height

    logger.info(f"‚úÖ file_id –Ω–∞–π–¥–µ–Ω: {file_id}")
    logger.info(f"–†–∞–∑–º–µ—Ä: {width}x{height}, –≤–µ—Å: {file_size} –±–∞–π—Ç")

    await message.reply(
        f"üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!\n\n"
        f"<code>file_id = '{file_id}'</code>\n\n"
        f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –∫–æ–¥ –±–æ—Ç–∞.",
        parse_mode="HTML"
    )

async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º...")
    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logger.info("–í—ã—Ö–æ–¥...")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())