from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from bot.utils.calendar import create_calendar
from bot.utils.database import (
    get_services, is_time_available, create_appointment, 
    get_service_name, get_user_appointments, cancel_appointment,
    get_available_time_slots, is_date_available, add_user
)
from bot.utils.reminders import notify_admin_about_booking
from bot.fsm import Appointment
from bot.config import MAIN_KB, LANGUAGE, ADMIN_IDS
import json
from pathlib import Path
from datetime import datetime

router = Router()

@router.message(F.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
async def start_appointment(message: types.Message):
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    await add_user(
        message.from_user.id,
        message.from_user.first_name,
        message.from_user.username
    )
    
    services = await get_services()
    if not services:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥.")
        return

    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text=name, callback_data=f"serv_{id}")]
        for id, name, _, _ in services
    ])
    
    ROOT_DIR = Path(__file__).parent.parent.parent
    texts_path = ROOT_DIR / "texts" / f"{LANGUAGE}.json"
    try:
        with open(texts_path, "r", encoding="utf-8") as f:
            texts = json.load(f)
    except FileNotFoundError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
        
    await message.answer(texts["select_service"], reply_markup=kb)

@router.callback_query(F.data == "open_appointment")
async def open_appointment(callback: types.CallbackQuery):
    await callback.answer()
    await start_appointment(callback.message)

@router.callback_query(F.data.startswith("serv_"))
async def select_service(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    service_id = int(callback.data.split("_")[1])
    now = datetime.now()
    kb = await create_calendar(service_id, now.year, now.month)
    
    ROOT_DIR = Path(__file__).parent.parent.parent
    texts_path = ROOT_DIR / "texts" / f"{LANGUAGE}.json"
    try:
        with open(texts_path, "r", encoding="utf-8") as f:
            texts = json.load(f)
    except FileNotFoundError:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
        
    await callback.message.answer(texts["select_date"], reply_markup=kb)
    await state.update_data(service_id=service_id)

@router.callback_query(F.data.startswith("cal_date_"))
async def select_date(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    parts = callback.data.split("_")
    service_id = int(parts[2])
    date_str = parts[3]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏ service_id
    await state.update_data(service_id=service_id, date=date_str)

    if not await is_date_available(date_str):
        await callback.message.answer("‚ùå –í —ç—Ç–æ—Ç –¥–µ–Ω—å —è –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é –∫–ª–∏–µ–Ω—Ç–æ–≤.")
        return

    all_slots = await get_available_time_slots(date_str)
    if not all_slots:
        await callback.message.answer("‚ùå –í —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.")
        return

    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ---
    selected_date = datetime.strptime(date_str, "%Y-%m-%d").date()
    today = datetime.now().date()

    available_buttons = []
    
    for time_slot in all_slots:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤–æ–±–æ–¥–Ω–æ –ª–∏ –≤—Ä–µ–º—è
        is_free = await is_time_available(date_str, time_slot)
        
        if selected_date == today:
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–æ
            hour, minute = map(int, time_slot.split(":"))
            current_hour = datetime.now().hour
            current_minute = datetime.now().minute
            
            # –°—á–∏—Ç–∞–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –≤–æ–∑–º–æ–∂–Ω–∞ –∑–∞ 1 —á–∞—Å –¥–æ –≤—Ä–µ–º–µ–Ω–∏
            time_ok = (hour > current_hour + 1) or \
                     (hour == current_hour + 1 and minute >= current_minute) or \
                     (hour == current_hour and minute > current_minute)
            
            if is_free and time_ok:
                available_buttons.append([types.InlineKeyboardButton(
                    text=time_slot, 
                    callback_data=f"time_{time_slot}"
                )])
            else:
                status = " (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)" if not time_ok else " (–∑–∞–Ω—è—Ç–æ)"
                available_buttons.append([types.InlineKeyboardButton(
                    text=f"{time_slot}{status}", 
                    callback_data="ignore"
                )])
        else:
            # –î–ª—è –±—É–¥—É—â–∏—Ö –¥–Ω–µ–π ‚Äî –æ–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞
            if is_free:
                available_buttons.append([types.InlineKeyboardButton(
                    text=time_slot, 
                    callback_data=f"time_{time_slot}"
                )])
            else:
                available_buttons.append([types.InlineKeyboardButton(
                    text=f"{time_slot} (–∑–∞–Ω—è—Ç–æ)", 
                    callback_data="ignore"
                )])

    kb = types.InlineKeyboardMarkup(inline_keyboard=available_buttons)
    
    ROOT_DIR = Path(__file__).parent.parent.parent
    texts_path = ROOT_DIR / "texts" / f"{LANGUAGE}.json"
    try:
        with open(texts_path, "r", encoding="utf-8") as f:
            texts = json.load(f)
    except FileNotFoundError:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
        
    await callback.message.answer(
        texts["select_time"].format(date=date_str),
        reply_markup=kb
    )

@router.callback_query(F.data.startswith("time_"))
async def select_time(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    time_str = callback.data.split("_")[1]
    data = await state.get_data()

    if "date" not in data:
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    date_str = data["date"]
    service_id = data["service_id"]

    if not await is_time_available(date_str, time_str):
        ROOT_DIR = Path(__file__).parent.parent.parent
        texts_path = ROOT_DIR / "texts" / f"{LANGUAGE}.json"
        try:
            with open(texts_path, "r", encoding="utf-8") as f:
                texts = json.load(f)
        except FileNotFoundError:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        await callback.message.answer(texts["time_taken"])
        return

    # ‚úÖ –ü–û–õ–£–ß–ê–ï–ú –ò–ú–Ø –£–°–õ–£–ì–ò –ó–î–ï–°–¨ (–¥–æ format!)
    service_name = await get_service_name(service_id)
    
    await state.update_data(time=time_str)
    
    ROOT_DIR = Path(__file__).parent.parent.parent
    texts_path = ROOT_DIR / "texts" / f"{LANGUAGE}.json"
    try:
        with open(texts_path, "r", encoding="utf-8") as f:
            texts = json.load(f)
    except FileNotFoundError:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
        
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
    ])
    
    # ‚úÖ –ü–ï–†–ï–î–ê–Å–ú service_name –≤ format()
    await callback.message.answer(
        texts["confirm_prompt"].format(date=date_str, time=time_str, service=service_name),
        reply_markup=kb,
        parse_mode="Markdown"
    )
    await state.set_state(Appointment.waiting_for_confirmation)

@router.callback_query(F.data == "confirm", Appointment.waiting_for_confirmation)
async def confirm_booking(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é...")
    data = await state.get_data()
    user_id = callback.from_user.id
    service_id = data["service_id"]
    date_str = data["date"]
    time_str = data["time"]

    if not await is_time_available(date_str, time_str):
        await callback.message.edit_text("‚ö†Ô∏è –í—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ.")
        await state.clear()
        return

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
    await create_appointment(user_id, service_id, date_str, time_str)
    service_name = await get_service_name(service_id)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    try:
        await notify_admin_about_booking(
            callback.from_user.first_name,
            service_name,
            date_str,  # date_str —É–∂–µ —Å—Ç—Ä–æ–∫–∞
            time_str   # time_str —É–∂–µ —Å—Ç—Ä–æ–∫–∞
        )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞: {e}")

    ROOT_DIR = Path(__file__).parent.parent.parent
    texts_path = ROOT_DIR / "texts" / f"{LANGUAGE}.json"
    try:
        with open(texts_path, "r", encoding="utf-8") as f:
            texts = json.load(f)
    except FileNotFoundError:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=None)
        await state.clear()
        return
        
    await callback.message.edit_text(
        texts["confirmed"].format(date=date_str, time=time_str, service=service_name),
        parse_mode="Markdown",
        reply_markup=None
    )
    await callback.message.answer(
        "‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ 'üßæ –ú–æ–∏ –∑–∞–ø–∏—Å–∏'.",
        reply_markup=MAIN_KB
    )
    await state.clear()

@router.callback_query(F.data == "cancel", Appointment.waiting_for_confirmation)
async def cancel_booking(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    
    ROOT_DIR = Path(__file__).parent.parent.parent
    texts_path = ROOT_DIR / "texts" / f"{LANGUAGE}.json"
    try:
        with open(texts_path, "r", encoding="utf-8") as f:
            texts = json.load(f)
    except FileNotFoundError:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=None)
        await state.clear()
        return
        
    await callback.message.edit_text(texts["cancelled"], reply_markup=None)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=MAIN_KB)
    await state.clear()

@router.callback_query(F.data.startswith("cal_prev_"))
async def prev_month(callback: types.CallbackQuery):
    await callback.answer()
    parts = callback.data.split("_")
    year = int(parts[2])
    month = int(parts[3])
    service_id = int(parts[4])
    kb = await create_calendar(service_id, year, month)
    await callback.message.edit_reply_markup(reply_markup=kb)

@router.callback_query(F.data.startswith("cal_next_"))
async def next_month(callback: types.CallbackQuery):
    await callback.answer()
    parts = callback.data.split("_")
    year = int(parts[2])
    month = int(parts[3])
    service_id = int(parts[4])
    kb = await create_calendar(service_id, year, month)
    await callback.message.edit_reply_markup(reply_markup=kb)