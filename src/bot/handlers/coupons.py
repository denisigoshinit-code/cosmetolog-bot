from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter, Command
from aiogram.types import Contact
from bot.utils.database import (
    create_coupon_with_details, get_user_coupons, use_coupon, 
    COUPON_TYPES, CONTACT_METHODS, update_coupon_status, get_pending_coupons,
    get_payment_coupons, get_coupon_by_id
)
from bot.fsm import CouponStates
from bot.config import MAIN_KB, ADMIN_IDS, LANGUAGE, bot
import json
import re
from pathlib import Path
import logging

logger = logging.getLogger(__name__)

router = Router()

# –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã 
PAYMENT_DETAILS = {
    "bank": "–°–±–µ—Ä",
    "phone": "+7 (922) 671-78-29",  
    "name": "–ï–ª–µ–Ω–∞ –ó—É–±–æ–≤–∞"
}

CONTACT_METHODS = {
    "1": "Telegram",
    "2": "–¢–µ–ª–µ—Ñ–æ–Ω", 
    "3": "–¢–æ–ª—å–∫–æ –∏–º—è"
}

@router.message(F.text == "üéÅ –ö—É–ø–æ–Ω—ã")
async def coupons_menu(message: types.Message):
    ROOT_DIR = Path(__file__).parent.parent.parent
    texts_path = ROOT_DIR / "texts" / f"{LANGUAGE}.json"
    try:
        with open(texts_path, "r", encoding="utf-8") as f:
            texts = json.load(f)
    except FileNotFoundError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    kb = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üé´ –°–æ–∑–¥–∞—Ç—å –∫—É–ø–æ–Ω")],
            [types.KeyboardButton(text="üìã –ú–æ–∏ –∫—É–ø–æ–Ω—ã")],
            [types.KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    
    text = (
        "üéÅ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ –∫—É–ø–æ–Ω—ã\n\n"
        "–•–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å –∫—Ä–∞—Å–∏–≤—É—é –∫–æ–∂—É –±–ª–∏–∑–∫–æ–º—É?\n\n"
        "1. üíé \"–ì–ª—É–±–æ–∫–æ–µ –æ—á–∏—â–µ–Ω–∏–µ\" ‚Äî 3500 ‚ÇΩ\n"
        "2. üîÅ \"–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–∂–∏\" ‚Äî 6000 ‚ÇΩ\n"
        "3. ‚ú® \"–ñ–µ–Ω–∞ –º–∏–ª–ª–∏–æ–Ω–µ—Ä–∞\" ‚Äî 5000 ‚ÇΩ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await message.answer(text, reply_markup=kb)

@router.message(F.text == "üé´ –°–æ–∑–¥–∞—Ç—å –∫—É–ø–æ–Ω")
async def start_coupon_creation(message: types.Message, state: FSMContext):
    text = (
        "üéÅ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ –∫—É–ø–æ–Ω—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:\n\n"
        "1. üíé \"–ì–ª—É–±–æ–∫–æ–µ –æ—á–∏—â–µ–Ω–∏–µ\" ‚Äî 3500 ‚ÇΩ\n"
        "2. üîÅ \"–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–∂–∏\" ‚Äî 6000 ‚ÇΩ\n"
        "3. ‚ú® \"–ñ–µ–Ω–∞ –º–∏–ª–ª–∏–æ–Ω–µ—Ä–∞\" ‚Äî 5000 ‚ÇΩ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1, 2 –∏–ª–∏ 3):"
    )
    await message.answer(text)
    await state.set_state(CouponStates.waiting_for_choice)

@router.message(CouponStates.waiting_for_choice, F.text.in_(["1", "2", "3"]))
async def choose_service(message: types.Message, state: FSMContext):
    choice = message.text
    service_data = COUPON_TYPES[choice]
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º "base_price" –≤–º–µ—Å—Ç–æ "price"
    await state.update_data(
        coupon_type=choice, 
        service_name=service_data["name"], 
        base_price=service_data["base_price"]  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û –ó–î–ï–°–¨
    )

    text = (
        f"{service_data['name']}\n\n"
        f"‚Ä¢ 1 —Å–µ–∞–Ω—Å ‚Äî {service_data['base_price']} ‚ÇΩ\n"  # ‚Üê –ò –∑–¥–µ—Å—å
        f"‚Ä¢ 3 —Å–µ–∞–Ω—Å–∞ ‚Äî {int(service_data['base_price'] * 3 * 0.9)} ‚ÇΩ (‚àí10%)\n"  # ‚Üê –ò –∑–¥–µ—Å—å
        f"‚Ä¢ 5 —Å–µ–∞–Ω—Å–æ–≤ ‚Äî {int(service_data['base_price'] * 5 * 0.85)} ‚ÇΩ (‚àí15%)\n\n"  # ‚Üê –ò –∑–¥–µ—Å—å
        f"üëâ –≠–∫–æ–Ω–æ–º–∏—è –¥–æ {service_data['base_price'] * 5 - int(service_data['base_price'] * 5 * 0.85)} ‚ÇΩ\n\n"  # ‚Üê –ò –∑–¥–µ—Å—å
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∞–Ω—Å–æ–≤:\n"
        "1 ‚Äî –û–¥–∏–Ω —Å–µ–∞–Ω—Å\n"
        "2 ‚Äî –¢—Ä–∏ —Å–µ–∞–Ω—Å–∞\n"
        "3 ‚Äî –ü—è—Ç—å —Å–µ–∞–Ω—Å–æ–≤"
    )
    await message.answer(text)
    await state.set_state(CouponStates.waiting_for_sessions)

@router.message(CouponStates.waiting_for_sessions, F.text.in_(["1", "2", "3"]))
async def choose_sessions(message: types.Message, state: FSMContext):
    sessions_choice = message.text
    sessions = 1 if sessions_choice == "1" else (3 if sessions_choice == "2" else 5)
    await state.update_data(sessions=sessions)
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, \"–ê–Ω–Ω–∞\"):")
    await state.set_state(CouponStates.waiting_for_recipient)

@router.message(CouponStates.waiting_for_recipient, F.text)
async def get_recipient_name(message: types.Message, state: FSMContext):
    await state.update_data(recipient=message.text)
    
    text = (
        "üìû –ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º?\n\n"
        "1. üì≤ Telegram (–ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –∏–ª–∏ @username)\n"
        "2. üìû –ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É (–≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä)\n"
        "3. ‚úçÔ∏è –¢–æ–ª—å–∫–æ –∏–º—è (–±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ 1, 2 –∏–ª–∏ 3"
    )
    await message.answer(text)
    await state.set_state(CouponStates.waiting_for_contact_method)

@router.message(CouponStates.waiting_for_contact_info, F.text)
async def get_contact_info(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ '–¢–æ–ª—å–∫–æ –∏–º—è'"""
    contact_info = message.text.strip()
    
    if not contact_info:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
        return
    
    await state.update_data(contact_info=contact_info)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è (–æ—Ç –∫–æ–≥–æ –ø–æ–¥–∞—Ä–æ–∫):")
    await state.set_state(CouponStates.waiting_for_sender)

@router.message(CouponStates.waiting_for_contact_method, F.text.in_(["1", "2", "3"]))
async def get_contact_method(message: types.Message, state: FSMContext):
    method_choice = message.text
    contact_method = CONTACT_METHODS[method_choice]
    await state.update_data(contact_method=contact_method)
    
    if method_choice == "1":
        # Telegram –≤–∞—Ä–∏–∞–Ω—Ç - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–≤–∞ —Å–ø–æ—Å–æ–±–∞
        kb = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)],
                [types.KeyboardButton(text="–í–≤–µ—Å—Ç–∏ @username")]
            ],
            resize_keyboard=True
        )
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:\n\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º' –∏–ª–∏\n"
            "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—É—á–∞—Ç–µ–ª—è",
            reply_markup=kb
        )
        # –ú–ï–ù–Ø–ï–ú —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –Ω–æ–≤–æ–µ
        await state.set_state(CouponStates.waiting_for_telegram_contact)
        
    elif method_choice == "2":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:", 
                        reply_markup=types.ReplyKeyboardRemove())
        # –ú–ï–ù–Ø–ï–ú —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –Ω–æ–≤–æ–µ  
        await state.set_state(CouponStates.waiting_for_phone_contact)
    else:
        # method_choice == "3" - –¢–æ–ª—å–∫–æ –∏–º—è
        await state.update_data(contact_info="–ù–µ —É–∫–∞–∑–∞–Ω–æ")  # –∏–ª–∏ ""
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è (–æ—Ç –∫–æ–≥–æ –ø–æ–¥–∞—Ä–æ–∫):",
                        reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(CouponStates.waiting_for_sender)

@router.message(CouponStates.waiting_for_telegram_contact, F.contact)
async def get_contact_from_phonebook(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –∏–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π –∫–Ω–∏–∂–∫–∏"""
    contact = message.contact
    
    if not contact.phone_number:
        await message.answer("‚ùå –í –∫–æ–Ω—Ç–∞–∫—Ç–µ –Ω–µ—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–Ω—Ç–∞–∫—Ç.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    contact_name = f"{contact.first_name or ''} {contact.last_name or ''}".strip()
    contact_info = f"TG: +{contact.phone_number}"
    
    await state.update_data(
        contact_info=contact_info,
        recipient_phone=contact.phone_number,
        recipient_name=contact_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    )
    
    await message.answer(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç {contact_name or '–ø–æ–ª—É—á–µ–Ω'}! –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è (–æ—Ç –∫–æ–≥–æ –ø–æ–¥–∞—Ä–æ–∫):",
                    reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(CouponStates.waiting_for_sender)

@router.message(CouponStates.waiting_for_telegram_contact, F.text)
async def get_username_contact(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ @username"""
    username = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç
    if username == "–í–≤–µ—Å—Ç–∏ @username":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @):",
                        reply_markup=types.ReplyKeyboardRemove())
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç username
    if username.startswith('@'):
        # –£–±–∏—Ä–∞–µ–º @ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö
        clean_username = username[1:]
        contact_info = f"TG: @{clean_username}"
        
        await state.update_data(
            contact_info=contact_info,
            recipient_username=clean_username
        )
        
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è (–æ—Ç –∫–æ–≥–æ –ø–æ–¥–∞—Ä–æ–∫):",
                        reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(CouponStates.waiting_for_sender)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ @username (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @) –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º")

@router.message(CouponStates.waiting_for_phone_contact, F.text)
async def get_phone_contact(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—Ä—É—á–Ω—É—é"""
    phone = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not re.match(r'^[\d\s\-\+\(\)]{5,20}$', phone):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    contact_info = f"–¢–µ–ª: {phone}"
    
    await state.update_data(
        contact_info=contact_info,
        recipient_phone=phone
    )
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è (–æ—Ç –∫–æ–≥–æ –ø–æ–¥–∞—Ä–æ–∫):",
                    reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(CouponStates.waiting_for_sender)

@router.message(CouponStates.waiting_for_sender, F.text)
async def finalize_coupon(message: types.Message, state: FSMContext):
    sender_name = message.text
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –∫—É–ø–æ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    coupon_id, price = await create_coupon_with_details(
        user_id=message.from_user.id,
        coupon_type=data["coupon_type"],
        sessions=data["sessions"],
        recipient=data["recipient"],
        contact_method=data["contact_method"],
        contact_info=data.get("contact_info", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
        sender=sender_name
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ (–ï–ª–µ–Ω—É)
    admin_text = (
        f"üéÅ –ù–û–í–´–ô –ó–ê–ü–†–û–° –ù–ê –ö–£–ü–û–ù\n\n"
        f"ID: {coupon_id}\n"
        f"–û—Ç: {sender_name}\n"
        f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {data['recipient']}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {data.get('contact_info', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–£—Å–ª—É–≥–∞: {data['service_name']}\n"
        f"–°–µ–∞–Ω—Å–æ–≤: {data['sessions']}\n"
        f"–°—É–º–º–∞: {price} ‚ÇΩ\n"
        f"–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
    )
    
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_coupon_{coupon_id}")],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_coupon_{coupon_id}")]
    ])
    
    try:
        for admin_id in ADMIN_IDS:
            await bot.send_message(admin_id, admin_text, reply_markup=kb)
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∞–º: {ADMIN_IDS}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤: {e}")
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤: {e}")
    
    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_text = (
        f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∫—É–ø–æ–Ω —Å–æ–∑–¥–∞–Ω!\n\n"
        f"ID –∫—É–ø–æ–Ω–∞: {coupon_id}\n"
        f"–ï–ª–µ–Ω–∞ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
        f"–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞–º –ø—Ä–∏–¥—É—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã."
    )
    
    await message.answer(user_text, reply_markup=MAIN_KB)
    await state.clear()

@router.message(Command("cancel"))
@router.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_coupon_creation(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫—É–ø–æ–Ω–∞"""
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.", reply_markup=MAIN_KB)
        return
        
    await state.clear()
    await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫—É–ø–æ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=MAIN_KB)

@router.message(F.text == "üìã –ú–æ–∏ –∫—É–ø–æ–Ω—ã")
async def show_my_coupons(message: types.Message):
    coupons = await get_user_coupons(message.from_user.id)
    
    if not coupons:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–æ–Ω–æ–≤.", reply_markup=MAIN_KB)
        return
    
    text = "üé´ –í–∞—à–∏ –∫—É–ø–æ–Ω—ã:\n\n"
    for coupon in coupons:
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ä–∞–±–æ—Ç–∞–µ–º —Å–æ —Å–ª–æ–≤–∞—Ä—ë–º
        text += (
            f"ID: {coupon['id']}\n"
            f"–£—Å–ª—É–≥–∞: {coupon['service']}\n"
            f"–°—Ç–∞—Ç—É—Å: {coupon['status']}\n"
            f"–°–µ–∞–Ω—Å–æ–≤: {coupon['used']}/{coupon['sessions']}\n"
            f"–°—É–º–º–∞: {coupon['price']} ‚ÇΩ\n"
            f"{'‚îÄ' * 20}\n"
        )
    
    await message.answer(text, reply_markup=MAIN_KB)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ (–ï–ª–µ–Ω—ã)
@router.callback_query(F.data.startswith("confirm_coupon_"))
async def confirm_coupon_admin(callback: types.CallbackQuery):
    coupon_id = callback.data.split("_")[-1]
    
    await update_coupon_status(coupon_id, "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã", paid="–ù–µ—Ç")
    
    coupon = await get_coupon_by_id(coupon_id)
    if coupon:
        user_id = coupon['user_id']
        price = coupon['price']
        
        payment_text = (
            f"‚úÖ –í–∞—à –∫—É–ø–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n"
            f"ID –∫—É–ø–æ–Ω–∞: {coupon_id}\n"
            f"–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É:\n\n"
            f"üè¶ –ë–∞–Ω–∫: {PAYMENT_DETAILS['bank']}\n"
            f"üìû –ù–æ–º–µ—Ä: {PAYMENT_DETAILS['phone']}\n"  
            f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {PAYMENT_DETAILS['name']}\n"
            f"üí≥ –°—É–º–º–∞: {price} ‚ÇΩ\n\n"  
            f"üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞\n"
            f"–≤ –õ–ò–ß–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø –ï–ª–µ–Ω–µ: @holodnayaplazma_bot\n\n"
            f"–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É–ø–æ–Ω –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! ‚úÖ"
        )
        
        try:
            await bot.send_message(user_id, payment_text)
            logger.info(f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {user_id}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            # –î–æ–±–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ–± –æ—à–∏–±–∫–µ
            await bot.send_message(ADMIN_IDS[0], f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    await callback.message.edit_text(
        callback.message.text + "\n\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã.",
        reply_markup=None
    )
    await callback.answer("–ö—É–ø–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")

@router.callback_query(F.data.startswith("reject_coupon_"))
async def reject_coupon_admin(callback: types.CallbackQuery):
    coupon_id = callback.data.split("_")[-1]
    await update_coupon_status(coupon_id, "–û—Ç–∫–ª–æ–Ω–µ–Ω")
    await callback.message.edit_text(
        callback.message.text + "\n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω."
    )
    await callback.answer("–ö—É–ø–æ–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—É–ø–æ–Ω–∞
@router.message(F.text == "üé´ –û—Ç–º–µ—Ç–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—É–ø–æ–Ω–∞")
async def mark_coupon_used(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∫—É–ø–æ–Ω–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è ID –∫—É–ø–æ–Ω–∞

