# src/bot/handlers/my_appointments.py
from aiogram import Router, F, types
from bot.utils.database import get_user_appointments, cancel_appointment
from bot.config import MAIN_KB, LANGUAGE
import json
from pathlib import Path
from bot.utils.logger import log

router = Router()


@router.message(F.text == "üßæ –ú–æ–∏ –∑–∞–ø–∏—Å–∏")
async def my_appointments(message: types.Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ö–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å ‚Äî –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã.
    """
    user_id = message.from_user.id
    appointments = await get_user_appointments(user_id)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç—ã
    ROOT_DIR = Path(__file__).parent.parent.parent
    texts_path = ROOT_DIR / "texts" / f"{LANGUAGE}.json"
    try:
        with open(texts_path, "r", encoding="utf-8") as f:
            texts = json.load(f)
    except FileNotFoundError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if not appointments:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.", reply_markup=MAIN_KB)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –æ—Ç–¥–µ–ª—å–Ω–æ —Å –∫–Ω–æ–ø–∫–æ–π
    for appt in appointments:
        appointment_id, date_str, time_str, service_name = appt

        text = (
            f"üìå *–í–∞—à–∞ –∑–∞–ø–∏—Å—å*\n\n"
            f"üìÖ {date_str} –≤ {time_str}\n"
            f"üíÖ {service_name}"
        )

        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å",
                callback_data=f"cancel_appt_{appointment_id}"
            )]
        ])

        await message.answer(text, reply_markup=kb, parse_mode="Markdown")

    # –í –∫–æ–Ω—Ü–µ ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=MAIN_KB)


@router.callback_query(F.data.startswith("cancel_appt_"))
async def cancel_appointment_callback(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ID –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–æ—á–Ω–æ–π –æ—Ç–º–µ–Ω—ã.
    """
    try:
        appointment_id = int(callback.data.split("_")[2])
        user_id = callback.from_user.id

        success = await cancel_appointment(appointment_id, user_id)

        if success:
            # –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É
            await callback.message.edit_text(
                "‚úÖ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=None
            )
            await callback.answer("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            log(user_id=user_id, action="appointment_cancelled", appointment_id=appointment_id)
        else:
            await callback.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            log(user_id=user_id, action="appointment_not_found", appointment_id=appointment_id)

    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        log(user_id=callback.from_user.id, action="cancel_appointment_failed", error="invalid_id_format")
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ", show_alert=True)
        log(user_id=callback.from_user.id, action="cancel_appointment_failed", error=str(e))