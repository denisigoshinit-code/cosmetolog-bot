from aiogram import Router, F, types
from bot.utils.database import get_user_appointments, cancel_appointment, get_service_name
from bot.config import MAIN_KB, LANGUAGE
import json
from pathlib import Path

router = Router()

@router.message(F.text == "üßæ –ú–æ–∏ –∑–∞–ø–∏—Å–∏")
async def my_appointments(message: types.Message):
    appointments = await get_user_appointments(message.from_user.id)
    
    ROOT_DIR = Path(__file__).parent.parent.parent
    texts_path = ROOT_DIR / "texts" / f"{LANGUAGE}.json"
    try:
        with open(texts_path, "r", encoding="utf-8") as f:
            texts = json.load(f)
    except FileNotFoundError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if not appointments:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.", reply_markup=MAIN_KB)
        return

    text = "üìå –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n\n"
    kb_buttons = []
    
    for appointment in appointments:
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ - (id, date, time, service_name)
        appointment_id, date_str, time_str, service_name = appointment
        text += f"üìÖ {date_str} –≤ {time_str}\nüíÖ {service_name}\n\n"
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É—Å–ª—É–≥–∏ –≤–º–µ—Å—Ç–æ ID
        kb_buttons.append([types.KeyboardButton(text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å: {service_name}")])

    # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    kb_buttons.append([types.KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    
    kb = types.ReplyKeyboardMarkup(
        keyboard=kb_buttons,
        resize_keyboard=True
    )
    
    await message.answer(text, reply_markup=kb)

@router.message(F.text.startswith("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å: "))
async def cancel_specific_appointment(message: types.Message):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        service_name = message.text.replace("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å: ", "").strip()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        appointments = await get_user_appointments(message.from_user.id)
        
        # –ò—â–µ–º –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É—Å–ª—É–≥–∏
        appointment_to_cancel = None
        for appointment in appointments:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ - (id, date, time, service_name)
            appointment_id, date_str, time_str, current_service_name = appointment
            if current_service_name == service_name:
                appointment_to_cancel = appointment
                break
        
        if not appointment_to_cancel:
            await message.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=MAIN_KB)
            return
            
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ - (id, date, time, service_name)
        appointment_id, date_str, time_str, service_name = appointment_to_cancel
        await cancel_appointment(appointment_id, message.from_user.id)
        
        await message.answer(
            f"‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞ '{service_name}' –æ—Ç–º–µ–Ω–µ–Ω–∞.", 
            reply_markup=MAIN_KB
        )
        
    except Exception as e:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å.", reply_markup=MAIN_KB)