from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from bot.utils.database import (
    get_all_coupons, get_week_appointments, mark_coupon_paid, 
    use_coupon_session, update_schedule_date, get_pending_coupons, get_active_coupons,
    get_payment_coupons, update_coupon_status, reject_coupon, get_active_coupons, get_coupon_by_id
)
from bot.commands.db_tools import get_db_stats, export_appointments_to_csv, get_schedule_for_period
from bot.fsm import AdminStates
from bot.config import ADMIN_IDS, MAIN_KB, ADMIN_KB, COUPONS_KB, SCHEDULE_KB, LANGUAGE
import json
from pathlib import Path

router = Router()

@router.message(F.text == "/admin")
async def cmd_admin(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    await message.answer("üéüÔ∏è –ê–¥–º–∏–Ω–∫–∞", reply_markup=ADMIN_KB)

@router.message(F.text == "üìÖ –ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã")
async def admin_clients(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    appointments = await get_week_appointments()
    if not appointments:
        await message.answer("üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é", reply_markup=ADMIN_KB)
        return

    text = "üìÖ –ó–ê–ü–ò–°–ò –ù–ê –ë–õ–ò–ñ–ê–ô–®–£–Æ –ù–ï–î–ï–õ–Æ\n\n"
    for appointment in appointments:  # –ò–ó–ú–ï–ù–ï–ù–û: appointments —Ç–µ–ø–µ—Ä—å —Å–ª–æ–≤–∞—Ä—å
        text += f"üìÖ {appointment['date']} –≤ {appointment['time']}\nüë§ {appointment['user_name'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (@{appointment['username'] or '–Ω–µ—Ç'})\nüíÖ {appointment['service']}\n\n"
    
    await message.answer(text, reply_markup=ADMIN_KB)

@router.message(F.text == "üéüÔ∏è –ö—É–ø–æ–Ω—ã")
async def admin_coupons(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    await message.answer("üéüÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É–ø–æ–Ω–∞–º–∏:", reply_markup=COUPONS_KB)

@router.message(F.text == "üìã –û–∂–∏–¥–∞—é—â–∏–µ –∫—É–ø–æ–Ω—ã")
async def show_pending_coupons(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    coupons = await get_pending_coupons()
    if not coupons:
        await message.answer("–ù–µ—Ç –∫—É–ø–æ–Ω–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=ADMIN_KB)
        return
    
    for coupon in coupons:
        # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ö–õ–Æ–ß–ò
        text = (
            f"üéÅ –ó–ê–ü–†–û–° –ù–ê –ö–£–ü–û–ù\n\n"
            f"ID: {coupon['id']}\n"
            f"–û—Ç: {coupon['sender']}\n"
            f"–î–ª—è: {coupon['recipient']}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç: {coupon['contact_info']}\n"
            f"–£—Å–ª—É–≥–∞: {coupon['service']}\n"
            f"–¶–µ–Ω–∞: {coupon['price']} ‚ÇΩ\n"
            f"–°–µ–∞–Ω—Å–æ–≤: {coupon['sessions']}\n"
            f"–°—Ç–∞—Ç—É—Å: {coupon['status']}\n"
            f"–°–æ–∑–¥–∞–Ω: {coupon['created_at']}"
        )
        
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_coupon_{coupon['id']}")],
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_coupon_{coupon['id']}")]
        ])
        
        await message.answer(text, reply_markup=kb)
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=ADMIN_KB)

@router.message(F.text == "üí≥ –û–∂–∏–¥–∞—é—â–∏–µ –æ–ø–ª–∞—Ç—ã")
async def show_payment_coupons(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    coupons = await get_payment_coupons()
    if not coupons:
        await message.answer("–ù–µ—Ç –∫—É–ø–æ–Ω–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç—ã.", reply_markup=COUPONS_KB)
        return
    
    for coupon in coupons:
        # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ö–õ–Æ–ß–ò
        text = (
            f"üí≥ –ö–£–ü–û–ù –û–ñ–ò–î–ê–ï–¢ –û–ü–õ–ê–¢–´\n\n"
            f"ID: {coupon['id']}\n"
            f"–û—Ç: {coupon['sender']}\n"
            f"–î–ª—è: {coupon['recipient']}\n"
            f"–£—Å–ª—É–≥–∞: {coupon['service']}\n"
            f"–¶–µ–Ω–∞: {coupon['price']} ‚ÇΩ\n"
            f"–°–µ–∞–Ω—Å–æ–≤: {coupon['sessions']}\n"
            f"–°—Ç–∞—Ç—É—Å: {coupon['status']}\n"
            f"–û–ø–ª–∞—á–µ–Ω–æ: {coupon['paid']}"
        )
        
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üí∞ –û—Ç–º–µ—Ç–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"mark_paid_{coupon['id']}")]
        ])
        
        await message.answer(text, reply_markup=kb)
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=COUPONS_KB)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã
@router.callback_query(F.data.startswith("mark_paid_"))
async def mark_paid_callback(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    
    coupon_id = callback.data.split("_")[2]
    await mark_coupon_paid(coupon_id)
    await callback.message.edit_text(
        callback.message.text + "\n\n‚úÖ –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ—á–µ–Ω–∞. –ö—É–ø–æ–Ω –∞–∫—Ç–∏–≤–µ–Ω."
    )
    await callback.answer("–ö—É–ø–æ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

@router.message(F.text == "‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫—É–ø–æ–Ω—ã")
async def show_active_coupons(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    coupons = await get_active_coupons()
    if not coupons:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤.", reply_markup=COUPONS_KB)
        return
    
    for coupon in coupons:
        # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ö–õ–Æ–ß–ò
        text = (
            f"‚úÖ –ê–ö–¢–ò–í–ù–´–ô –ö–£–ü–û–ù\n\n"
            f"ID: {coupon['id']}\n"
            f"–î–ª—è: {coupon['recipient']}\n"
            f"–£—Å–ª—É–≥–∞: {coupon['service']}\n"
            f"–¶–µ–Ω–∞: {coupon['price']} ‚ÇΩ\n"
            f"–°–µ–∞–Ω—Å–æ–≤: {coupon['used']} –∏–∑ {coupon['sessions']}\n"
            f"–°—Ç–∞—Ç—É—Å: {coupon['status']}\n"
            f"–û–ø–ª–∞—á–µ–Ω–æ: {coupon['paid']}"
        )
        
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(
                text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ", 
                callback_data=f"use_coupon_{coupon['id']}"
            )]
        ])
        
        await message.answer(text, reply_markup=kb)
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=COUPONS_KB)

@router.callback_query(F.data.startswith("use_coupon_"))
async def use_coupon_callback(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    
    coupon_id = callback.data.split("_")[2]
    remaining = await use_coupon_session(coupon_id)
    
    if remaining is None:
        await callback.answer("‚ùå –ö—É–ø–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—Å–µ —Å–µ–∞–Ω—Å—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –û–ë–ù–û–í–õ–Å–ù–ù–´–ï –¥–∞–Ω–Ω—ã–µ –∫—É–ø–æ–Ω–∞
    coupon = await get_coupon_by_id(coupon_id)
    if coupon:
        # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –°–õ–û–í–ê–†–Ø
        text = (
            f"‚úÖ –ê–ö–¢–ò–í–ù–´–ô –ö–£–ü–û–ù\n\n"
            f"ID: {coupon['id']}\n"
            f"–î–ª—è: {coupon['recipient']}\n"
            f"–£—Å–ª—É–≥–∞: {coupon['service']}\n"
            f"–¶–µ–Ω–∞: {coupon['price']} ‚ÇΩ\n"
            f"–°–µ–∞–Ω—Å–æ–≤: {coupon['used']} –∏–∑ {coupon['sessions']}\n"
            f"–°—Ç–∞—Ç—É—Å: {coupon['status']}\n"
            f"–û–ø–ª–∞—á–µ–Ω–æ: {coupon['paid']}"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(text)
    
    await callback.answer(f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å —Å–µ–∞–Ω—Å–æ–≤: {remaining}")

@router.message(AdminStates.waiting_for_coupon_to_mark, F.text.startswith("GC-"))
async def mark_coupon_usage(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    coupon_id = message.text
    remaining = await use_coupon_session(coupon_id)
    
    if remaining is None:
        await message.answer("‚ùå –ö—É–ø–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—Å–µ —Å–µ–∞–Ω—Å—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã.", reply_markup=ADMIN_KB)
    else:
        await message.answer(f"‚úÖ –°–µ–∞–Ω—Å –æ—Ç–º–µ—á–µ–Ω! –û—Å—Ç–∞–ª–æ—Å—å —Å–µ–∞–Ω—Å–æ–≤: {remaining}", reply_markup=ADMIN_KB)
    
    await state.clear()

@router.callback_query(F.data.startswith("pay_"))
async def mark_paid(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    coupon_id = callback.data.split("_")[1]
    await mark_coupon_paid(coupon_id)
    await callback.message.edit_text(callback.message.text + "\n\n‚úÖ –û–ø–ª–∞—á–µ–Ω–æ.")
    await callback.answer("–ö—É–ø–æ–Ω –æ–ø–ª–∞—á–µ–Ω")

@router.callback_query(F.data.startswith("reject_"))
async def reject_coupon_callback(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    coupon_id = callback.data.split("_")[1]
    await reject_coupon(coupon_id)
    await callback.message.edit_text(callback.message.text + "\n\n‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω.")
    await callback.answer("–ö—É–ø–æ–Ω –æ—Ç–∫–ª–æ–Ω—ë–Ω")

@router.message(F.text == "‚öôÔ∏è –ì—Ä–∞—Ñ–∏–∫")
async def manage_schedule(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞:", reply_markup=SCHEDULE_KB)
    await state.set_state(AdminStates.waiting_for_schedule_action)

@router.message(AdminStates.waiting_for_schedule_action, F.text.in_(["üü© –†–∞–∑—Ä–µ—à–∏—Ç—å –ø—Ä–∏—ë–º", "üü• –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å", "‚è≥ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±–µ–¥", "üåô –ù–æ—á–Ω–∞—è —Å–º–µ–Ω–∞"]))
async def schedule_action(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    actions = {
        "üü© –†–∞–∑—Ä–µ—à–∏—Ç—å –ø—Ä–∏—ë–º": ("–î–∞", "09:00 ‚Äì 20:00"),
        "üü• –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å": ("–ù–µ—Ç", "‚Äî"),
        "‚è≥ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±–µ–¥": ("–î–∞", "09:00 ‚Äì 17:00 (–æ–±–µ–¥ 13:00‚Äì14:00)"),
        "üåô –ù–æ—á–Ω–∞—è —Å–º–µ–Ω–∞": ("–î–æ 18:00", "09:00 ‚Äì 17:00")
    }
    status, time_range = actions[message.text]
    await state.update_data(status=status, time_range=time_range)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (YYYY-MM-DD):")
    await state.set_state(AdminStates.waiting_for_date)

@router.message(AdminStates.waiting_for_date, F.text.len() == 10)
async def update_schedule_handler(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    date = message.text
    data = await state.get_data()
    await update_schedule_date(date, data["status"], data["time_range"])
    await message.answer(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ –Ω–∞ {date} –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=ADMIN_KB)
    await state.clear()

@router.message(F.text == "üìÖ –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫")
async def show_schedule(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 14 –¥–Ω–µ–π
    from datetime import datetime, timedelta
    start_date = datetime.now().strftime("%Y-%m-%d")
    end_date = (datetime.now() + timedelta(days=14)).strftime("%Y-%m-%d")
    
    schedule = await get_schedule_for_period(start_date, end_date)
    if not schedule:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫")
        return
    
    text = "üìÖ –ì–†–ê–§–ò–ö –†–ê–ë–û–¢–´ (14 –¥–Ω–µ–π):\n\n"
    for day in schedule:
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å–ª–æ–≤–∞—Ä—è
        date_str = day['date']
        available = day['available']
        time_range = day['time_range']
        shift_type = day['shift_type']
        
        text += f"üìÖ {date_str}\n"
        text += f"üü¢ –î–æ—Å—Ç—É–ø–Ω–æ: {available}\n"
        text += f"‚è∞ –í—Ä–µ–º—è: {time_range}\n"
        text += f"üë©‚Äçüíº –°–º–µ–Ω–∞: {shift_type}\n"
        text += "‚îÄ" * 30 + "\n"
    
    await message.answer(text)

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    stats = await get_db_stats()
    if not stats:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        return
    
    text = (
        f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users']}\n"
        f"üìÖ –ó–∞–ø–∏—Å–µ–π: {stats['appointments']}\n"
        f"üé´ –ö—É–ø–æ–Ω–æ–≤: {stats['coupons']}\n\n"
        f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n"
    )
    
    for appointment in stats['recent_appointments']:
        text += f"‚Ä¢ {appointment['date']} {appointment['time']} - {appointment['service']} ({appointment['user_name']})\n"
    
    await message.answer(text)

@router.message(F.text == "üìÅ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV")
async def export_csv(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    csv_content = await export_appointments_to_csv()
    if not csv_content:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    filename = "appointments_export.csv"
    with open(filename, "w", encoding="utf-8-sig") as f:
        f.write(csv_content)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    from aiogram.types import FSInputFile
    document = FSInputFile(filename)
    await message.answer_document(document, caption="üìÅ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø–∏—Å–µ–π")

@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_admin(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    await state.clear()
    await message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=ADMIN_KB)

@router.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    await message.answer("üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=MAIN_KB)