from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
from datetime import datetime, timedelta
from bot.utils.database import get_tomorrow_appointments, get_today_appointments 
from .schedule_manager import auto_extend_schedule
from bot.config import bot, ADMIN_IDS

from .logger import logger

scheduler = AsyncIOScheduler()

async def send_reminder_24h(user_id: int, date_str: str, time: str, service: str):  # date_str –≤–º–µ—Å—Ç–æ date
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞"""
    try:
        text = (
            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏!\n\n"
            f"–ó–∞–≤—Ç—Ä–∞ –≤ {time} —É –≤–∞—Å –∑–∞–ø–∏—Å—å:\n"
            f"üíÖ {service}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ üëç"
        )
        await bot.send_message(user_id, text)
        logger.info(f"REMINDER_24H_SENT - User: {user_id}, Date: {date_str}, Time: {time}")
    except Exception as e:
        logger.error(f"REMINDER_24H_FAILED - User: {user_id}, Error: {e}")

async def send_reminder_2h(user_id: int, date_str: str, time: str, service: str):  # date_str –≤–º–µ—Å—Ç–æ date
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 2 —á–∞—Å–∞"""
    try:
        text = (
            f"‚è∞ –°–∫–æ—Ä–æ –∑–∞–ø–∏—Å—å!\n\n"
            f"–ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞ –≤ {time}:\n"
            f"üíÖ {service}\n\n"
            f"–ñ–¥—É –≤–∞—Å! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞ 10 –º–∏–Ω—É—Ç üïê"
        )
        await bot.send_message(user_id, text)
        logger.info(f"REMINDER_2H_SENT - User: {user_id}, Time: {time}")
    except Exception as e:
        logger.error(f"REMINDER_2H_FAILED - User: {user_id}, Error: {e}")

async def schedule_reminders():
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–ø–∏—Å—è—Ö"""
    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞ (–Ω–∞ –∑–∞–≤—Ç—Ä–∞)
    tomorrow_appointments = await get_tomorrow_appointments()
    for appointment in tomorrow_appointments:
        date_str = appointment['date']  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã
        time = appointment['time']
        service = appointment['service']
        user_id = appointment['user_id']
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ datetime –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        appointment_datetime = datetime.strptime(f"{date_str} {time}", "%Y-%m-%d %H:%M")
        reminder_time = appointment_datetime - timedelta(hours=24)
        
        if reminder_time > datetime.now():
            scheduler.add_job(
                send_reminder_24h,
                DateTrigger(run_date=reminder_time),
                args=[user_id, date_str, time, service]  # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã
            )
    
    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 2 —á–∞—Å–∞ (–Ω–∞ —Å–µ–≥–æ–¥–Ω—è)
    today_appointments = await get_today_appointments()
    for appointment in today_appointments:
        date_str = appointment['date']  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã
        time = appointment['time']
        service = appointment['service']
        user_id = appointment['user_id']
        
        appointment_datetime = datetime.strptime(f"{date_str} {time}", "%Y-%m-%d %H:%M")
        reminder_time = appointment_datetime - timedelta(hours=2)
        
        if reminder_time > datetime.now():
            scheduler.add_job(
                send_reminder_2h,
                DateTrigger(run_date=reminder_time),
                args=[user_id, date_str, time, service]  # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã
            )

async def notify_admin_about_booking(user_name: str, service: str, date: str, time: str):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"""
    from bot.config import ADMIN_IDS  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
    
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(
                admin_id,
                f"‚úÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!\n\n"
                f"üë§ {user_name}\n"
                f"üíÖ {service}\n"
                f"üìÖ {date} –≤ {time}\n\n"
            )
        except Exception as e:
            logger.error(f"ADMIN_NOTIFY_FAILED for {admin_id}: {e}")

def setup_scheduler():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
    scheduler.add_job(schedule_reminders, 'interval', hours=1)  # –ö–∞–∂–¥—ã–π —á–∞—Å –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º
    scheduler.add_job(auto_extend_schedule, 'cron', hour=2, minute=0)
    scheduler.start()
    logger.info("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")