# bot/utils/schedule_manager.py
from datetime import datetime, timedelta
import logging
from .database import get_db_url
from .schedule_generator import generate_schedule_data
import asyncpg

logger = logging.getLogger(__name__)

async def get_last_schedule_date():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã schedule.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç date –∏–ª–∏ None.
    """
    conn = await asyncpg.connect(get_db_url())
    try:
        row = await conn.fetchrow("""
            SELECT MAX(date) FROM schedule
        """)
        if row and row[0]:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –ë–î –≤ –æ–±—ä–µ–∫—Ç date
            return datetime.strptime(row[0], "%Y-%m-%d").date()
        return None
    except Exception as e:
        logger.error(f"Error getting last schedule date: {e}")
        return None
    finally:
        await conn.close()

def generate_schedule_data_from_date(start_date):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ 90 –¥–Ω–µ–π, –Ω–∞—á–∏–Ω–∞—è —Å –∑–∞–¥–∞–Ω–Ω–æ–π –¥–∞—Ç—ã.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ generate_schedule_data,
    –Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–µ —Å 12.09.2025, –∞ —Å–æ start_date.
    
    Args:
        start_date (date): –î–∞—Ç–∞, —Å –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.
        
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.
    """
    schedule = {}
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ 8-–¥–Ω–µ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –¥–ª—è start_date
    # –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ü–∏–∫–ª —Å –Ω—É–∂–Ω–æ–≥–æ –º–µ—Å—Ç–∞
    base_start_date = datetime(2025, 9, 12).date()  # –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞
    days_diff = (start_date - base_start_date).days
    cycle_start_index = days_diff % 8
    
    for i in range(90):  # –ù–∞ 90 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥
        current_date = start_date + timedelta(days=i)
        date_str = current_date.strftime("%Y-%m-%d")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Ü–∏–∫–ª–µ
        cycle_position = (cycle_start_index + i) % 8
        
        if cycle_position in [0, 1]:
            # –î–Ω–∏ 1-2: "–ù–µ—Ç" (–î–Ω–µ–≤–Ω–∞—è —Å–º–µ–Ω–∞)
            schedule_info = {
                "available": "–ù–µ—Ç", 
                "time_range": "‚Äî", 
                "type": "–î–Ω–µ–≤–Ω–∞—è —Å–º–µ–Ω–∞", 
                "times": []
            }
        elif cycle_position in [2, 3]:
            # –î–Ω–∏ 3-4: "–î–æ 18:00" (–ù–æ—á–Ω–∞—è —Å–º–µ–Ω–∞)
            schedule_info = {
                "available": "–î–æ 18:00", 
                "time_range": "10:00 ‚Äì 16:00", 
                "type": "–ù–æ—á–Ω–∞—è —Å–º–µ–Ω–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ 18:00)", 
                "times": [f"{h:02d}:00" for h in range(10, 16)]
            }
        else:
            # –î–Ω–∏ 5-8: "–î–∞" (–í—ã—Ö–æ–¥–Ω–æ–π ‚Üí —Ä–∞–±–æ—Ç–∞)
            schedule_info = {
                "available": "–î–∞", 
                "time_range": "09:00 ‚Äì 19:00", 
                "type": "–í—ã—Ö–æ–¥–Ω–æ–π ‚Üí —Ä–∞–±–æ—Ç–∞", 
                "times": [f"{h:02d}:00" for h in range(9, 19)]
            }
        
        schedule[date_str] = schedule_info
    
    return schedule

async def auto_extend_schedule():
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 90 –¥–Ω–µ–π.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
    """
    logger.info("üîÑ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –≥—Ä–∞—Ñ–∏–∫–∞...")
    
    try:
        last_date = await get_last_schedule_date()
        if not last_date:
            logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –≥—Ä–∞—Ñ–∏–∫–∞.")
            return
        
        # –ï—Å–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ –º–µ–Ω—å—à–µ 7 –¥–Ω–µ–π ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –±–ª–æ–∫
        days_until_end = (last_date - datetime.now().date()).days
        if days_until_end < 7:
            new_start_date = last_date + timedelta(days=1)
            logger.info(f"üìÖ –î–æ –∫–æ–Ω—Ü–∞ –≥—Ä–∞—Ñ–∏–∫–∞ {days_until_end} –¥–Ω–µ–π. –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–¥–ª–µ–Ω–∏–µ —Å {new_start_date}...")
            
            new_schedule_data = generate_schedule_data_from_date(new_start_date)
            conn = await asyncpg.connect(get_db_url())
            try:
                for date_str, schedule_info in new_schedule_data.items():
                    available_times = ",".join(schedule_info["times"])
                    
                    await conn.execute("""
                        INSERT INTO schedule (date, available, time_range, shift_type, available_times) 
                        VALUES ($1, $2, $3, $4, $5)
                        ON CONFLICT (date) DO UPDATE SET
                            available = EXCLUDED.available,
                            time_range = EXCLUDED.time_range,
                            shift_type = EXCLUDED.shift_type,
                            available_times = EXCLUDED.available_times
                    """, date_str, schedule_info["available"], schedule_info["time_range"], schedule_info["type"], available_times)
                
                logger.info(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª—ë–Ω —Å {new_start_date.strftime('%Y-%m-%d')}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            finally:
                await conn.close()
        else:
            logger.info(f"üìÖ –ì—Ä–∞—Ñ–∏–∫ –≤ –ø–æ—Ä—è–¥–∫–µ. –î–æ –∫–æ–Ω—Ü–∞: {days_until_end} –¥–Ω–µ–π.")
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")